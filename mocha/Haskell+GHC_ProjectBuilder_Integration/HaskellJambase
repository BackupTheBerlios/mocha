# ProjectBuilder Haskell support
# Copyright (C) 2003 Andre Pang

rule ProcessHaskell
{
    for VARIANT in $(BUILD_VARIANTS) {
	for ARCH in $(ARCHS) {
	    local OBJECT_FILE ;
	    local OBJECT_SUBDIR = $(OBJECT_FILE_DIR_$(VARIANT))$(/)$(ARCH) ;
	    # $(2)_UNIQUENAME is defined only if the basename of the file isn't unique within the target.
	    if $($(2)_UNIQUENAME) {
		OBJECT_FILE = $($(2)_UNIQUENAME:G=$(VARIANT)-$(ARCH)).o ;
	    }
	    else {
		OBJECT_FILE = $(2:D=:S=:G=$(VARIANT)-$(ARCH)).o ;
	    }
	    DEPENDS $(OBJECT_FILE) : $(OBJECT_SUBDIR) ;
	    if ! $(OBJECT_SUBDIR) in $(PRODUCT_FILES) {
		Mkdir $(OBJECT_SUBDIR) ;
		PRODUCT_FILES += $(OBJECT_SUBDIR) ;
		if $(_BUILD_PHASING) = YES {
		    BUILD_PHASE_PRODUCTS += $(OBJECT_SUBDIR) ;
		}
	    }
	    ARCH on $(OBJECT_FILE) = $(ARCH) ;
	    PER_ARCH_CFLAGS = $(PER_ARCH_CFLAGS_$(ARCH)) ;
	    if $(JAVA_BRIDGET_TARGET) {
		DEPENDS $(OBJECT_FILE) : $(JAVA_BRIDGET_TARGET) ;
	    }
	    OTHER_CFLAGS on $(OBJECT_FILE) = $(OTHER_CFLAGS_$(VARIANT)) ;
	    GHCFLAGS on $(OBJECT_FILE) = $(GHCFLAGS) ;

	    # object file depends on imports
	    #IMPORTS = `/Users/andrep/m/Mocha/hs-depends-on $(1)` ;
	    #DEPENDS $(1) : $(IMPORTS) ;
	    #for IMPORT in $($(1)_IMPORTS) {
	    #	CompileHaskell $(IMPORT) $(2) ;
	    #}

	    CompileHaskell $(OBJECT_FILE) : $(2) ;
	    if $(2:BS) != $(VECTOR_STUB:BS) {
		# add object file to object files and phase products
		# unless it is the compiled generated vector stub
		OBJECT_FILES_$(VARIANT) += $(OBJECT_FILE) ;
		OBJECT_FILES_$(VARIANT)_$(ARCH) += $(OBJECT_FILE) ;
		if $(_BUILD_PHASING) = YES {
		    BUILD_PHASE_PRODUCTS += $(OBJECT_FILE) ;
		}
	    }
	    LOCATE on $(OBJECT_FILE) = $(OBJECT_SUBDIR) ;
	    if $(2) = $(MODULE_INFO_FILE) {
		MODULE_OBJECT_FILE_$(VARIANT) = $(OBJECT_FILE) ;
		LOCATE on $(MODULE_OBJECT_FILE_$(VARIANT)) = $(OBJECT_SUBDIR) ;
		DEPENDS $(1) : $(MODULE_OBJECT_FILE_$(VARIANT)) ;
	    }
	    else {
		# object file is added to linked files
		# unless it is the compiled generated vector stub
		if $(2:BS) != $(VECTOR_STUB:BS) {
		    LINKED_FILES_$(VARIANT) += $(OBJECT_FILE) ;
		}
	    }
	}
    }
}

rule CompileHaskell
{
    # object file depends on the source file
    DEPENDS $(1) : $(2) ;

    # Initialize the flags, and set search paths to nothing
    ## FLAGS on $(1) = -arch $(ARCH) $(PER_ARCH_CFLAGS) -fno-common -fpascal-strings $(OPTIMIZATION_CFLAGS) $(WARNING_CFLAGS) ;
    ## FLAGS on $(1) += -pipe ;
    if $(GCC_VERSION) = 3.x {
        FLAGS on $(1) += -optc -fmessage-length=0 ;
        if $(PRODUCT_TYPE) = Tool || $(PRODUCT_TYPE) = Application {
            USE_DYNAMIC_NO_PIC default = YES ;
        } else {
            USE_DYNAMIC_NO_PIC default = NO ;
        }
        if $(USE_DYNAMIC_NO_PIC) = YES {
            ## FLAGS on $(1) += -mdynamic-no-pic ;
        }
    }
    if $(GCC_TREAT_WARNINGS_AS_ERRORS) = YES {
        ## FLAGS on $(1) += -Werror ;
    }
    # seed search paths with target-wide values
    HEADER_SEARCH_PATHS on $(1) = $(HEADER_SEARCH_PATHS) ;
    FRAMEWORK_SEARCH_PATHS on $(1) = $(FRAMEWORK_SEARCH_PATHS) ;

    # object output directory
    OBJECT_SUBDIR on $(1) = $(OBJECT_SUBDIR) ;

    # If the source file is in a subdirectory, then search that
    # subdirectory for headers
    if $(2:D) {
        HEADER_SEARCH_PATHS on $(1) += $(2:D) ;
    }
    # We must compile with the extension-specific build flags
    FLAGS on $(1) += $($(2:S)_CFLAGS) ;
    # Add debug flags, if appropriate.
    #if $(DEBUGGING_SYMBOLS) = YES {
    #    FLAGS on $(1) += -g ;
    #}
    # Add profiling flags, if appropriate.
    if $(PROFILING_CODE) = YES {
        FLAGS on $(1) += -prof ;
    }
    # Pass the trusted-precomp file name to the compiler to keep track
    # of which precompiled headers it has already sanity checked.
    if $(OS) in MACOS DARWIN  &&  $(EFFECTIVE_PFE_FILE_$(ARCH)) = "" {
        ## FLAGS on $(1) += -precomp-trustfile $(PRECOMP_TRUSTFILE) ;
    }
    if $(CPP_HEADERMAP_FILE) {
        ## FLAGS on $(1) += "-Wp,-header-mapfile,$(CPP_HEADERMAP_FILE)" ;
    }
    if YES in $(GENERATE_CPP_ILOG_FILES) {
        local INCLUSION_LOG_FILE default = $(OBJECT_FILE_DIR)-$(VARIANT)$(/)$(ARCH)$(/)$(1:DB).ilog ;
        ## FLAGS on $(1) += "-Wp,-inclusion-log-file,$(INCLUSION_LOG_FILE)" ;
    }
    if $(INDEX_GENERATION_PIPE_NAME) != "" {
        ## FLAGS on $(1) += "-fgen-index=$(INDEX_GENERATION_PIPE_NAME)" ;
    }
    if $(EFFECTIVE_PFE_FILE_$(ARCH)) != ""  &&  $(SUPPRESS_PREFIX_HEADER) != YES {
        ## PREFIX_HEADER_CFLAGS on $(1) = --load-pch "$(EFFECTIVE_PFE_FILE_$(ARCH))" ;
        if $(ENABLE_PREFIX_HEADER_DEPENDENCIES) != NO {
            ## DEPENDS $(1) : $(EFFECTIVE_PFE_FILE_$(ARCH)) ;
        }
    }
    if $(EFFECTIVE_PREFIX_HEADER) != ""  &&  $(SUPPRESS_PREFIX_HEADER) != YES {
        ## PREFIX_HEADER_CFLAGS on $(1) += -include "$(EFFECTIVE_PREFIX_HEADER)" ;
        if $(ENABLE_PREFIX_HEADER_DEPENDENCIES) != NO {
            ## DEPENDS $(1) : $(EFFECTIVE_PREFIX_HEADER) ;
        }
    }
}

actions CompileHaskell
{
    /usr/local/bin/ghc --make -cpp -pgmP cpp3 -optP -traditional -no-link -fglasgow-exts -framework-path $(FRAMEWORK_SEARCH_PATHS:Q) -i/Users/andrep/m/mocha/Mocha/examples -I$(HEADER_SEARCH_PATHS:Q) -i$(HEADER_SEARCH_PATHS:Q) -package mocha -i$(OBJECT_SUBDIR:Q) $(FLAGS:Q) $(GLOBAL_CFLAGS) -I$(DERIVED_PATHS:Q) -i$(DERIVED_PATHS:Q) $(PREFIX_HEADER_CFLAGS:Q) "$(OTHER_CFLAGS)" "$(GHCFLAGS)" $($(2)_COMPILER_FLAGS) -odir $(OBJECT_SUBDIR:Q) -hidir $(OBJECT_SUBDIR:Q) $(2:Q)
}

.hs_RULE = ProcessHaskell ;

# Include original ProjectBuilder Jambase file

include /Developer/Makefiles/pbx_jamfiles/ProjectBuilderJambase ;

# Use GHC for linking if there are any Haskell source files

actions quietly together StandaloneExecutable.Link bind StandaloneExecutable.ARGUMENTS
{
    if [ " YES" = ""\ "$(HAS_HASKELL)" ]; then
	# fix this so it can -no-hs-main or not depending on Main.hs existance
	/usr/local/bin/ghc -pgmc gcc-3.3 -pgml gcc-3.3 -o $(1:Q) "-L$(LIBRARY_SEARCH_PATHS)" "-framework-path" "$(FRAMEWORK_SEARCH_PATHS)" $(INSTALLED_NAME_FLAG) "$(StandaloneExecutable.ARGUMENTS)"
    else
	$(_LD_FOR_LINKING) -o $(1:Q) "-L$(LIBRARY_SEARCH_PATHS)" "-F$(FRAMEWORK_SEARCH_PATHS)" "$(FLAGS.o)" $(INSTALLED_NAME_FLAG) "$(StandaloneExecutable.ARGUMENTS)"
    fi
}

actions quietly together StandaloneExecutable.LinkUsingFileList bind StandaloneExecutable.ARGUMENTS
{
    if [ " YES" = ""\ "$(HAS_HASKELL)" ]; then
	# fix this so it can -no-hs-main or not depending on Main.hs existance
	/usr/local/bin/ghc -no-hs-main -o $(1:Q) "-L$(LIBRARY_SEARCH_PATHS)" "-framework-path" "$(FRAMEWORK_SEARCH_PATHS)" -package mocha `/Users/andrep/m/mocha/Haskell+GHC_ProjectBuilder_Integration/ghc-linkfilelist $(2:Q)` $(INSTALLED_NAME_FLAG) "$(StandaloneExecutable.ARGUMENTS)"
    else
	$(_LD_FOR_LINKING) -o $(1:Q) "-L$(LIBRARY_SEARCH_PATHS)" "-F$(FRAMEWORK_SEARCH_PATHS)" -filelist $(2:Q) "$(FLAGS.o)" $(INSTALLED_NAME_FLAG) "$(StandaloneExecutable.ARGUMENTS)"
    fi
}


