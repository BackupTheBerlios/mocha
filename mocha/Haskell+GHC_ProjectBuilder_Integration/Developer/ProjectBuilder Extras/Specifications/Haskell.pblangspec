/**
   Haskell language specification.
*/

(
{
  Identifier = haskell;
  Name = "Haskell";
  Description = "Haskell 98";
  SyntaxColoring = {
    IdentifierStartChars = "_";
    CaseSensitive = YES;
    UnicodeSymbols = YES;
    CommentsCanBeNested = YES;
    MultiLineComment = (
        ( "{-", "-}" )
    );
    String = (
        ( "\"", "\"" )
    );
    EscapeCharacter = "\\";
    Character = (
        ( "'", "'" )
    );
    IdentifierStartChars = "_"; /* What does this do? */
    IdentiferChars = "_";
    DocComment = "|"; /* For Haddock; may need to be " |" or "^" or "#" */
    DocCommentKeywordStart = "#";
    DocCommentKeywords = (
	"hide",
	"prune",
	"ignore-exports"
    );
    SingleLineComment = ( "--" );
    /* For GHC: allow cpp syntax */
    PreprocessorKeywordStart = "#";
    PreprocessorKeywords = (
	"error",
	"define",
	"elif",
	"else",
	"endif",
	"error",
	"file",
	"if",
	"ifdef",
	"ifndef",
	"import",
	"include",
	"line",
	"pragma",
	"undef",
	"warning"
    );
    Keywords = (
	"case",
	"class",
	"data",
	"deriving",
	"do",
	"else",
	"export",
	"if",
	"import",
	"in",
	"infix",
	"infixl",
	"infixr",
	"instance",
	"let",
	"module",
	"newtype",
	"of",
	"primitive",
	"then",
	"type",
	"where"
    );
    AltKeywords = (
	/* Prelude functions */
        "abs",
        "acos",
        "acosh",
        "all",
        "and",
        "any",
        "appendFile",
        "approxRational",
        "asin",
        "asinh",
        "asTypeOf",
        "atan",
        "atan2",
        "atanh",
        "break",
        "catch",
        "ceiling",
        "chr",
        "compare",
        "concat",
        "concatMap",
        "const",
        "cos",
        "cosh",
        "curry",
        "cycle",
        "decodeFloat",
        "denominator",
        "digitToInt",
        "div",
        "divMod",
        "drop",
        "dropWhile",
        "either",
        "elem",
        "encodeFloat",
        "enumFrom",
        "enumFromThen",
        "enumFromThenTo",
        "enumFromTo",
        "error",
        "even",
        "exp",
        "exponent",
        "fail",
        "filter",
        "flip",
        "floatDigits",
        "floatRadix",
        "floatRange",
        "floor",
        "fmap",
        "foldl",
        "foldl1",
        "foldr",
        "foldr1",
        "fromDouble",
        "fromEnum",
        "fromInt",
        "fromInteger",
        "fromIntegral",
        "fromRational",
        "fst",
        "gcd",
        "getChar",
        "getContents",
        "getLine",
        "head",
        "id",
        "index",
        "init",
        "inRange",
        "interact",
        "intToDigit",
        "ioError",
        "isAlpha",
        "isAlphaNum",
        "isAscii",
        "isControl",
        "isDenormalized",
        "isDigit",
        "isHexDigit",
        "isIEEE",
        "isInfinite",
        "isLower",
        "isNaN",
        "isNegativeZero",
        "isOctDigit",
        "isPrint",
        "isSpace",
        "isUpper",
        "iterate",
        "last",
        "lcm",
        "length",
        "lex",
        "lexDigits",
        "lexLitChar",
        "lines",
        "log",
        "logBase",
        "lookup",
        "map",
        "mapM",
        "mapM_",
        "max",
        "maxBound",
        "maximum",
        "maybe",
        "min",
        "minBound",
        "minimum",
        "mod",
        "negate",
        "not",
        "notElem",
        "null",
        "numerator",
        "odd",
        "or",
        "ord",
        "otherwise",
        "pi",
        "pred",
        "primExitWith",
        "print",
        "product",
        "properFraction",
        "putChar",
        "putStr",
        "putStrLn",
        "quot",
        "quotRem",
        "range",
        "rangeSize",
        "read",
        "readDec",
        "readFile",
        "readFloat",
        "readHex",
        "readInt",
        "readIO",
        "readList",
        "readLitChar",
        "readLn",
        "readOct",
        "readParen",
        "reads",
        "readSigned",
        "readsPrec",
        "realToFrac",
        "recip",
        "rem",
        "repeat",
        "replicate",
        "return",
        "reverse",
        "round",
        "scaleFloat",
        "scanl",
        "scanl1",
        "scanr",
        "scanr1",
        "seq",
        "sequence",
        "sequence_",
        "show",
        "showChar",
        "showInt",
        "showList",
        "showLitChar",
        "showParen",
        "shows",
        "showSigned",
        "showsPrec",
        "showString",
        "significand",
        "signum",
        "sin",
        "sinh",
        "snd",
        "span",
        "splitAt",
        "sqrt",
        "subtract",
        "succ",
        "sum",
        "tail",
        "take",
        "takeWhile",
        "tan",
        "tanh",
        "toEnum",
        "toInt",
        "toInteger",
        "toLower",
        "toRational",
        "toUpper",
        "truncate",
        "uncurry",
        "undefined",
        "unlines",
        "until",
        "unwords",
        "unzip",
        "unzip3",
        "userError",
        "words",
        "writeFile",
        "zip",
        "zip3",
        "zipWith",
        "zipWith3",

	/* Datatypes */
        "Addr",
        "Bool",
        "Char",
        "Double",
        "Either",
        "EmptyRec",
        "EmptyRow",
        "FilePath",
        "Float",
        "Int",
        "Integer",
        "IO",
        "IOError",
        "IOResult",
        "Maybe",
        "Ordering",
        "Ratio",
        "Rational",
        "ReadS",
        "Rec",
        "ShowS",
        "String",

	/* Classes */
        "Bounded",
        "Enum",
        "Eq",
        "Floating",
        "Fractional",
        "Functor",
        "Integral",
        "Ix",
        "Monad",
        "Num",
        "Ord",
        "Read",
        "Real",
        "RealFloat",
        "RealFrac",
        "Show",

	/* Constructors */
        "EQ",
        "False",
        "GT",
        "Just",
        "Left",
        "LT",
        "Nothing",
        "Right",
        "True"
    );
  };
}
)

