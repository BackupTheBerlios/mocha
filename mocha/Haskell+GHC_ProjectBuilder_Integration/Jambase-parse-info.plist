/**
    Jambase Parse Info


    This dictionary maps names of built-in Jambase rules to dictionaries containing hints about how to parse output from those rules. This property list is only used by the PBXBuildCommandOutputParser class. That class first checks the target's user-customizable translation rules (if any), and failing that, this static dictionary is consulted for Jam rule information.

    Currently, regular expressions specified in this property list are always applied to a line of output at a time.

    The value of each rule name is usually a dictionary containing zero or more of the keys described below (all of which are optional). Alternatively the rule name can map to a string, in which case the two rule names are considered to be synonyms.

    If the value is a dictionary, the available keys are:

        InfileParamNum  --  Zero-based index of the Jambase rule parameter that identifies the path of the input file. This path is usually relative to the project directory.

        ProgressStatusFormat  --  Format of the string to use as the progress status during invocation of this rule. In the IDE, this string is shown in the progress status bar. Arg 1 is the name of the input file for which the rule is being invoked (as determined using 'InfileParamNum').

        MessageStatusFormat  --  Format of the string to use as the top-level category for any build-messages parsed from the output of this rule. In the IDE, this string is shown at the top level of the outline view under the 'Build' tab. Arg 1 is the name of the input file for which the rule is being invoked (as determined using 'InfileParamNum'). Arg 2 is the file name parsed from the output message itself (or the empty string if unknown).

        FilenameRegexes  --  This key is ignored in this version of Project Builder. It might be used in the future.

        OutputParseRules  --  Array that specifies the parse rules that should be applied, in order, to each line of output produced by the invocation of the build rule. The first parse rule that matches causes processing of further parse rules to stop. Each parse rule is a two-element array containing two strings. The first string is a regular expression, and the second is a token identifying the action to take if the regular expression matches the line of output. The regular expression should contain three subexpressions (enclosed in unescaped parentheses). Subexpression 1 should match to the name of the file to which the message applies, subexpression 2 should match to the line number, and subexpression 3 should match to the description message to be shown to the user. Currently, the action valid tokens are:

                emit-error  --  Causes an error message to be emitted. It will appear under the category determined by 'MessageStatusFormat'.

                emit-warning  --  Causes a warning message to be emitted. It will appear under the category determined by 'MessageStatusFormat'.

                emit-notice  --  Causes a notice message to be emitted. It will appear under the category determined by 'MessageStatusFormat'. Unlike errors and warnings, notices don't end the built up "included-from" chain.

                emit-inclusion  --  Causes an inclusion message to be emitted. Inclusion messages allow each entry of the gcc-form "In file included from:" to be shown as a separate entry in the IDE. This is useful for following chains of #include statements. Each successive inclusion message is added as a child of the previous one.

                append-to-previous  --  Causes the subexpression 3 to be appended to the most recently emitted message (of any kind). This is used for warning/error messages that span multiple lines.

                ignore  --  Causes regex matching for the line of output under consideration to stop, thus causing the line to be ignored. No message is emitted.
*/
{
    CompileC = {
        InfileParamNum = 1;
        ProgressStatusFormat = "Compiling %@";   // arg 1 is name of rule's input file
        MessageStatusFormat = "Compiling %@";    // arg 1 is name of rule's input file, arg 2 is name of file containing message (@"" if unknown)
        FilenameRegexes = ("^/usr/bin/cc .* (.*\\.(?:c|m|mm|C|M|MM|cpp|c++|cxx))");
        OutputParseRules = (
            ("()()( \\(Each undeclared identifier is reported only once for each function it appears in.\\))$",  append-to-previous),
            ("()()( \\(Each undeclared identifier is reported only once)$",  append-to-previous),
            ("()()(for each function it appears in.\\))$",  append-to-previous),
            ("()()( \\(Long double usage is reported only once for each file.)$",  append-to-previous),
            ("()()( To disable this warning, use -Wno-long-double.\\))$",  append-to-previous),
            ("output pipe has been closed$",  ignore),
            ("^In file included from (.*):([0-9]*).$",  emit-inclusion),
            ("^                 from (.*):([0-9]*).$",  emit-inclusion),
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*: (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*) (instantiated from .*)$",  emit-notice),
            ("^([^:]*):([0-9]*):   (instantiated from .*)$",  emit-notice),
            ("^([^:]*):() (In instantiation of .*)$",  emit-notice),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^([^:]*):([0-9]*):[0-9]*: (.*)$",  emit-error),
            ("()()(^The load file does not have a recognizable format\.$)",  emit-error),
            ("()()(^.*: Cannot open dump file:.*$)",  emit-error),
            ("()^(cc1[^:]*): (.*)$",  emit-error),
        );
    };
    CompileCplusplus = CompileC;
    PrecompileHeader = CompileC;
    MakePFEFile = CompileC;

    Ld = {
        InfileParamNum = 0;
        ProgressStatusFormat = "Linking %@";
        MessageStatusFormat = "Linking %@";
        FilenameRegexes = ("^/usr/bin/(?:cc|ld) .* -o (.*\\.o)");
        OutputParseRules = (
            ("^(?:/usr/bin/ld|ld): warning symbol appears more than once in the same file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning ([0-9]+) symbols specified in -sectorder file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning ([0-9]+) symbols have no specifications in -sectorder file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning prebinding not disabled even though",  ignore),
            ("^(?:/usr/bin/ld|ld): ()()(warning .*)$",  emit-warning),
            ("^(?:/usr/bin/ld|ld): ()()(.*)$",  emit-error),
            ("^()()([_.].*)",  append-to-previous),
        );
    };
    StandaloneExecutable = { IsQuiet = Yes; };
    StandaloneExecutable.Link = Ld;
    StandaloneExecutable.LinkUsingFileList = Ld;
    DynamicLibrary = { IsQuiet = Yes; };
    DynamicLibrary.Link = Ld;
    DynamicLibrary.LinkUsingFileList = Ld;
    StaticLibrary = { IsQuiet = Yes; };
    StaticLibrary.Link = Ld;
    StaticLibrary.LinkUsingFileList = Ld;
    ProcessLink = Ld;
    MasterObjectFile.Combine = Ld;

    Mig = {
        InfileParamNum = 0;
        ProgressStatusFormat = "Migging %@";
        MessageStatusFormat = "Migging %@";
        FilenameRegexes = ("/usr/bin/mig .* \\\"$origin/(.*\\.(?:defs|mig))\\\"");
        OutputParseRules = (
            ("errors found. Abort.$",  ignore),
            ("^(?:/usr/bin/mig|mig): fatal: \\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^(?:/usr/bin/mig|mig): \\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^\\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
        );
    };
    Mig.server = Mig;
    Mig.client = Mig;

    Cp = {
        InfileParamNum = 0;
        ProgressStatusFormat = "Copying %@";
        MessageStatusFormat = "Copying %@";
        OutputParseRules = (
            ("()()(.+: .+: No such file or directory)",  emit-error),
            ("()()(.+: .+: Permission denied)",  emit-error),
            ("()()(.+: .+: Is a directory)",  emit-error),
        );
    };
    RobustCp.CleanBeforeAndAfter = Cp;
    PBXCp = Cp;

    Clean = {
        InfileParamNum = 1;
        ProgressStatusFormat = "Removing %@";
        MessageStatusFormat = "Removing %@";
    };
    Clean.Remove = Clean;
    Clean.RemoveAfter = Clean;

    Rm = {
        InfileParamNum = 0;
        ProgressStatusFormat = "Removing %@";
        MessageStatusFormat = "Removing %@";
    };

    Mkdir = {
        InfileParamNum = 0;
        ProgressStatusFormat = "Creating directory %@";
        MessageStatusFormat = "Creating directory %@";
    };

    SymLink = {
        IsQuiet = Yes;
        InfileParamNum = 0;
        ProgressStatusFormat = "Creating symbolic link %@";
        MessageStatusFormat = "Creating symbolic link %@";
    };

    PhaseScriptExecution = {
        ProgressStatusFormat = "Running custom shell script";
        MessageStatusFormat = "Running custom shell script %2$@ - %1$@";
        OutputParseRules = (
            ("()()( \\(Each undeclared identifier is reported only once for each function it appears in.\\))$",  append-to-previous),
            ("()()( \\(Each undeclared identifier is reported only once)$",  append-to-previous),
            ("()()(for each function it appears in.\\))$",  append-to-previous),
            ("()()( \\(Long double usage is reported only once for each file.)$",  append-to-previous),
            ("()()( To disable this warning, use -Wno-long-double.\\))$",  append-to-previous),
            ("output pipe has been closed$",  ignore),
            ("^In file included from (.*):([0-9]*).$",  emit-inclusion),
            ("^                 from (.*):([0-9]*).$",  emit-inclusion),
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*: (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*) (instantiated from .*)$",  emit-notice),
            ("^([^:]*):([0-9]*):   (instantiated from .*)$",  emit-notice),
            ("^([^:]*):() (In instantiation of .*)$",  emit-notice),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^([^:]*):([0-9]*):[0-9]*: (.*)$",  emit-error),
            ("()()(^The load file does not have a recognizable format\.$)",  emit-error),
            ("()()(^.*: Cannot open dump file:.*$)",  emit-error),
            ("()^(cc1[^:]*): (.*)$",  emit-error),
            ("^Note: (.*)() (uses or overrides a deprecated API.*)$",  emit-warning),
            ("^Note: ()()(Some input files use or override a deprecated API.*)$",  emit-warning),
            ("^Note: ()()(Recompile with -deprecation for details.*)$",	 append-to-previous),
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^symbol  ()()(:.*)$",  append-to-previous),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (Warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (Caution: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (.*)$",  emit-error),
            ("errors found. Abort.$",  ignore),
            ("^(?:/usr/bin/mig|mig): fatal: \\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^(?:/usr/bin/mig|mig): \\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^\\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^(?:/usr/bin/ld|ld): warning symbol appears more than once in the same file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning ([0-9]+) symbols specified in -sectorder file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning ([0-9]+) symbols have no specifications in -sectorder file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning prebinding not disabled even though",  ignore),
            ("^(?:/usr/bin/ld|ld): ()()(warning .*)$",  emit-warning),
            ("^(?:/usr/bin/ld|ld): ()()(.*)$",  emit-error),
            ("^()()([_.].*)",  append-to-previous),
        );
    };

    ExternalBuildToolExecution = {
        ProgressStatusFormat = "Running external build tool";
        MessageStatusFormat = "Running external build tool";
        OutputParseRules = (
            ("()()( \\(Each undeclared identifier is reported only once for each function it appears in.\\))$",  append-to-previous),
            ("()()( \\(Each undeclared identifier is reported only once)$",  append-to-previous),
            ("()()(for each function it appears in.\\))$",  append-to-previous),
            ("()()( \\(Long double usage is reported only once for each file.)$",  append-to-previous),
            ("()()( To disable this warning, use -Wno-long-double.\\))$",  append-to-previous),
            ("output pipe has been closed$",  ignore),
            ("^In file included from (.*):([0-9]*).$",  emit-inclusion),
            ("^                 from (.*):([0-9]*).$",  emit-inclusion),
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*: (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*) (instantiated from .*)$",  emit-notice),
            ("^([^:]*):([0-9]*):   (instantiated from .*)$",  emit-notice),
            ("^([^:]*):() (In instantiation of .*)$",  emit-notice),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^([^:]*):([0-9]*):[0-9]*: (.*)$",  emit-error),
            ("()()(^The load file does not have a recognizable format\.$)",  emit-error),
            ("()()(^.*: Cannot open dump file:.*$)",  emit-error),
            ("()^(cc1[^:]*): (.*)$",  emit-error),
            ("^Note: (.*)() (uses or overrides a deprecated API.*)$",  emit-warning),
            ("^Note: ()()(Some input files use or override a deprecated API.*)$",  emit-warning),
            ("^Note: ()()(Recompile with -deprecation for details.*)$",	 append-to-previous),
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^symbol  ()()(:.*)$",  append-to-previous),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (Warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (Caution: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (.*)$",  emit-error),
            ("errors found. Abort.$",  ignore),
            ("^(?:/usr/bin/mig|mig): fatal: \\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^(?:/usr/bin/mig|mig): \\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^\\\"(.*)\\\", line ([0-9]*): (.*)$",  emit-error),
            ("^(?:/usr/bin/ld|ld): warning symbol appears more than once in the same file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning ([0-9]+) symbols specified in -sectorder file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning ([0-9]+) symbols have no specifications in -sectorder file",  ignore),
            ("^(?:/usr/bin/ld|ld): warning prebinding not disabled even though",  ignore),
            ("^(?:/usr/bin/ld|ld): ()()(warning .*)$",  emit-warning),
            ("^(?:/usr/bin/ld|ld): ()()(.*)$",  emit-error),
            ("^()()([_.].*)",  append-to-previous),
        );
    };

    Touch = {
        IsQuiet = Yes;
    };

    ClearFileList = {
        IsQuiet = Yes;
    };

    AppendToFileList = {
        IsQuiet = Yes;
    };

    BuildPhase = {
        IsQuiet = Yes;
    };

    VersioningSystem_apple-generic.Create = {
        IsQuiet = Yes;
    };

    JavaCompile = {
        ProgressStatusFormat = "Compiling Java source files";
        MessageStatusFormat = "Compiling %2$@\0%1$@";   // The '\0%1$@' part is just to allow us to skip the first arg without showing it.
        OutputParseRules = (
            ("^Note: (.*)() (uses or overrides a deprecated API.*)$",  emit-warning),
            ("^Note: ()()(Some input files use or override a deprecated API.*)$",  emit-warning),
            ("^Note: ()()(Recompile with -deprecation for details.*)$",	 append-to-previous),
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^symbol  ()()(:.*)$",  append-to-previous),
        );
    };
    JavaCompile.default = JavaCompile;
    JavaCompile.jikes = {
        ProgressStatusFormat = "Compiling Java source files";
        MessageStatusFormat = "Compiling %2$@\0%1$@";   // The '\0%1$@' part is just to allow us to skip the first arg without showing it.
        OutputParseRules = (
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (Warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (Caution: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*:[0-9]*:[0-9]*: (.*)$",  emit-error),
        );
    };
    JavaCompile.jikesWithFileList = JavaCompile.jikes;

    OSACompile = {
        InfileParamNum = 1;
        ProgressStatusFormat = "Compiling %@";   // arg 1 is name of rule's input file
        MessageStatusFormat = "Compiling %@";    // arg 1 is name of rule's input file, arg 2 is name of file containing message (@"" if unknown)
        FilenameRegexes = ("^/usr/bin/osacompile .* (.*\\.(?:applescript))");
        OutputParseRules = (
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
        );
    };

    /* Haskell support */
    CompileHaskell = {
        InfileParamNum = 1;
        ProgressStatusFormat = "Compiling %@";   // arg 1 is name of rule's input file
        MessageStatusFormat = "Compiling %@";    // arg 1 is name of rule's input file, arg 2 is name of file containing message (@"" if unknown)
        FilenameRegexes = ("^/usr/local/bin/ghc .* (.*\\.(?:hs|lhs))");
        OutputParseRules = (
            ("^([^:]*):([0-9]*): (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*):[0-9]*: (warning: .*)$",  emit-warning),
            ("^([^:]*):([0-9]*) (instantiated from .*)$",  emit-notice),
            ("^([^:]*):([0-9]*):   (instantiated from .*)$",  emit-notice),
            ("^([^:]*):() (In instantiation of .*)$",  emit-notice),
            ("^([^:]*):([0-9]*): (.*)$",  emit-error),
            ("^([^:]*):([0-9]*):[0-9]*: (.*)$",  emit-error),
            ("()()(^The load file does not have a recognizable format\.$)",  emit-error),
            ("()()(^.*: Cannot open dump file:.*$)",  emit-error),
            ("()^(ghc[^i:]*): (.*)$",  emit-error),
        );
    };

}

/* $Id: Jambase-parse-info.plist,v 1.1 2003/10/06 12:20:05 andrep Exp $ */
